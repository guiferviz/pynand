{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Logic circuit simulator. Building a computer from NAND gates. Wired NAND Documentation : https://guiferviz.github.io/wirednand Source Code : https://github.com/guiferviz/wirednand \ud83e\udd14 What is this? TODO \ud83e\udd13 How it works? TODO Credits Logo generated with dreamlike.art .","title":"Overview"},{"location":"#wired-nand","text":"Documentation : https://guiferviz.github.io/wirednand Source Code : https://github.com/guiferviz/wirednand","title":"Wired NAND"},{"location":"#what-is-this","text":"TODO","title":"\ud83e\udd14 What is this?"},{"location":"#how-it-works","text":"TODO","title":"\ud83e\udd13 How it works?"},{"location":"#credits","text":"Logo generated with dreamlike.art .","title":"Credits"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is inspired on Keep a Changelog . This project uses Semantic Versioning . Unreleased 0.1.0 - 2023-01-09 Added Core classes added: Component , Wire , Nand , and Simulation . Function to find Nand s in a given list of Component . Components added: And , Not , Or , Xor , Bus , Clock , NandBus and SRLatch .","title":"Changes"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is inspired on Keep a Changelog . This project uses Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#010-2023-01-09","text":"","title":"0.1.0 - 2023-01-09"},{"location":"changelog/#added","text":"Core classes added: Component , Wire , Nand , and Simulation . Function to find Nand s in a given list of Component . Components added: And , Not , Or , Xor , Bus , Clock , NandBus and SRLatch .","title":"Added"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report bugs using GitHub issues. Fix bugs listed in the GitHub issues page. Look for those marked with a \"Good first issue\" if you are looking for something easy. Implement features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write documentation. Update/add docstrings in the Python code, contribute to any file inside the docs directory, or even create blog posts in your favourite blogging platform. Submit feedback using GitHub issues. Issues are not necessarily for bugs, you can use them to post any kind of ideas/feedback or just thank the authors for their work . Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If you are adding/removing/modifying some functionality, please describe your contribution in CHANGELOG.md . The pull request should work for Python all the supported Python versions.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"Report bugs using GitHub issues. Fix bugs listed in the GitHub issues page. Look for those marked with a \"Good first issue\" if you are looking for something easy. Implement features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write documentation. Update/add docstrings in the Python code, contribute to any file inside the docs directory, or even create blog posts in your favourite blogging platform. Submit feedback using GitHub issues. Issues are not necessarily for bugs, you can use them to post any kind of ideas/feedback or just thank the authors for their work .","title":"Types of Contributions"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If you are adding/removing/modifying some functionality, please describe your contribution in CHANGELOG.md . The pull request should work for Python all the supported Python versions.","title":"Pull Request Guidelines"},{"location":"faq/","text":"Frequently Asked Questions TODO","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"TODO","title":"Frequently Asked Questions"},{"location":"tags/","text":"Tags Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"eps/ep00/","text":"EP 0 - Wired NAND Enhancement Proposals #ep-table td img { vertical-align: top; border-radius: 10px; } Authors: guiferviz Status: \u2705 Active Created: 2022-11-14 Tuberia version: 0.0.1 This first EP introduces EPs. Here we define what EPs are, what process should be followed to propose one and what information they should contain. What is a EP? EP stands for Enhancement Proposal. A EP is a design document providing information to the Wired NAND community, or describing a new feature for Wired NAND or its processes or environment. EP is to Wired NAND what PEP is to Python. In fact, the first two sentences of this paragraph are an adaptation of the first lines of PEP 1 . Creation process At the moment, the creation process is very simple: Create a new file inside docs/eps . The number of the new EP should be chosen by adding 1 to the last existing EP. Copy the header macro of this EP and update the different values. Learn how to set the status in the following flow diagram. Write the document. See more about this point in the following section. Publish a PR to start the review/discussion. Flow diagram that defines how to set an status: graph TD Q{Required implementation?} -->|No| A[Active] Q -->|Yes| P[Planned] P -->|when implemented| A P -->|when no longer valid| D[Deprecated] A -->|when no longer valid| D What a EP should contain? EP files should be written in a friendly way, without assuming too much knowledge on the part of the reader. It is a technical document, but technical terms should not be abused. A common structure is not required, just make sure it is comprehensible. Include an abstract after the metadata table at the beginning and organise the article into sections of your choice.","title":"EP 0 - Wired NAND Enhancement Proposals"},{"location":"eps/ep00/#ep-0-wired-nand-enhancement-proposals","text":"#ep-table td img { vertical-align: top; border-radius: 10px; } Authors: guiferviz Status: \u2705 Active Created: 2022-11-14 Tuberia version: 0.0.1 This first EP introduces EPs. Here we define what EPs are, what process should be followed to propose one and what information they should contain.","title":"EP 0 - Wired NAND Enhancement Proposals"},{"location":"eps/ep00/#what-is-a-ep","text":"EP stands for Enhancement Proposal. A EP is a design document providing information to the Wired NAND community, or describing a new feature for Wired NAND or its processes or environment. EP is to Wired NAND what PEP is to Python. In fact, the first two sentences of this paragraph are an adaptation of the first lines of PEP 1 .","title":"What is a EP?"},{"location":"eps/ep00/#creation-process","text":"At the moment, the creation process is very simple: Create a new file inside docs/eps . The number of the new EP should be chosen by adding 1 to the last existing EP. Copy the header macro of this EP and update the different values. Learn how to set the status in the following flow diagram. Write the document. See more about this point in the following section. Publish a PR to start the review/discussion. Flow diagram that defines how to set an status: graph TD Q{Required implementation?} -->|No| A[Active] Q -->|Yes| P[Planned] P -->|when implemented| A P -->|when no longer valid| D[Deprecated] A -->|when no longer valid| D","title":"Creation process"},{"location":"eps/ep00/#what-a-ep-should-contain","text":"EP files should be written in a friendly way, without assuming too much knowledge on the part of the reader. It is a technical document, but technical terms should not be abused. A common structure is not required, just make sure it is comprehensible. Include an abstract after the metadata table at the beginning and organise the article into sections of your choice.","title":"What a EP should contain?"},{"location":"include/ep_header/","text":"","title":"Ep header"},{"location":"tags/","text":"Tags Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"}]}